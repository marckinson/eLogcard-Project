'use strict';
let express = require('express');
let router = express.Router();
let request = require('request');
let config = require("config");


/* GET specific blockchain information */
router.get('/blocks/:blockNum(\\d+)', function(req, res, next) {

  console.log('INFO: BockChain -> GET ', req.params.blockNum, ' Information');
  let api = config.get('api');
  //Recreate URL to invoke our hyperledger peer in order to obtain informations
  let options = {
      url: api.protocol + '://' + api.ip+':'+api.port_external+'/chain/blocks/'+req.params.blockNum,
      method: 'GET'
  };
  request(options, function (error, response, body){
      if (!error && response.statusCode === 200) {
        let result = {};
        result.block = JSON.parse(body);
        console.log('INFO: BockChain -> GET ',req.params.blockNum, ' SUCCEED\n',result);
		if(typeof result.block.transactions!=='undefined'){
			for (var i = 0, len = result.block.transactions.length; i < len; i++) {
				let transaction=result.block.transactions[i];
				transaction.payload=new Buffer(transaction.payload, 'base64').toString('utf-8');
			}
		}
		
		res.setHeader('Content-Type', 'application/json');

        res.send(JSON.stringify(result));
      }
      else
      {
        res.status(400);
        let err = {};
        err.message = 'Unable to get block';
        err.error = true;
        console.error('ERROR : BockChain -> GET ',req.params.blockNum, ' ERROR[',error,']');
        res.send(err);
      }
  });
});


/* GET blockchains information */
router.get('/blocks', function(req, res, next) {

  console.log('INFO: BockChain -> GET chain informations');
  let api = config.get('api');
  //Recreate URL to invoke our hyperledger peer in order to obtain informations
  let options = {
      url: api.protocol + '://' + api.ip+':'+api.port_external+'/chain',
      method: 'GET'
  };

  console.log(options);
  request(options, function (error, response, body){
        if (!error && response && response.statusCode === 200) {
            let result = {};
            result.height = JSON.parse(body).height;
            result.currentBlockHash = JSON.parse(body).currentBlockHash;
            console.log('INFO: BockChain -> GET chain informations SUCCEED\n',result);
			res.setHeader('Content-Type', 'application/json');
            res.send(result);
        }
        else
        {
            let err = {};
            err.message = 'Unable to get chain length';
            err.error = true;
            res.status(400);
            console.error('ERROR : BockChain -> GET chain information ERROR[',error,']');
            res.send(err);
        }
    });
});






module.exports = {};
module.exports.router = router;