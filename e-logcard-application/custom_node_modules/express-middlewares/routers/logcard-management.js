'use strict';
let express = require('express');
let router = express.Router();
let format = require('date-format');
let logcardManager = require("../../utils/chaincode-logcard.js")
let hfcUtil = require("../../utils/hfcUtil.js")
const uuidV1 = require('uuid/v1');
const nodeUtil = require('util');


// Parts
router.post("/parts", function (req, res, next) {
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
    var part = {
        "pn": req.body.pn,
        "sn": req.body.sn,
        "id": uuidV1(),
        "partName": req.body.partName,
        "type": req.body.type,
        "owner": req.user.username,
        "responsible": req.body.responsible,
        "helicopter": req.body.helicopter,
        "assembly": req.body.assembly,
        "vDate": vDate,
    };
	enrollUser(req,function(enrolledUser){
		logcardManager.createPart(enrolledUser, part).then(function () {
            console.log("Part creation succeed");
            res.status("200").send(part);
        });
	});
    
});
router.put("/parts/:action/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		
		var action = req.params.action;
		var id = req.params.id;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		switch (action) {
			case "RespoTransfer":
				let responsible = req.body.responsible;
				transfertResponsable(enrolledUser,id, responsible,res);
			break;
			case "OwnerTransfer":
				let owner = req.body.owner;
				transfertOwner(enrolledUser,id, owner,res);
			break;
			case "PerformActs":
				let modType = req.body.modType;
				let description = req.body.description;
				performActs(enrolledUser,id, modType, description,res);
			break;
			default:
            break;
		}

	});  
});
router.get("/parts/", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		let parts = logcardManager.getAllPartsDetails(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/partsNoAssemb/", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		let parts = logcardManager.getAllPartsWithoutAssembly(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/partsNoAircraft/", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		let parts = logcardManager.getAllPartsWithoutAircraft(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/parts/historic/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.getPartDetails(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.put("/parts/scrapp/", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		var id = req.body.id;
        let parts = logcardManager.scrappPart(enrolledUser, id, vDate).then(function (parts) {
          res.status("200").send(true);
        });
	});
});
router.put("/assemblies/scrapp/", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		var id = req.body.id;
        let parts = logcardManager.scrappAssembly(enrolledUser, id, vDate).then(function (parts) {
          res.status("200").send(true);
        });
	});
});
router.put("/aircrafts/scrapp/", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		var id = req.body.id;
        let parts = logcardManager.scrappAircraft(enrolledUser, id, vDate).then(function (parts) {
          res.status("200").send(true);
        });
	});
});



// Aircraft 
router.post("/aircrafts", function (req, res, next) {
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
    var aircraft = {
        "an": req.body.an,
        "sn": req.body.sn,
        "id": uuidV1(),
		"aircraftName": req.body.aircraftName,
        "owner": req.user.username,
        "vDate": vDate,
    };
	enrollUser(req,function(enrolledUser){
		logcardManager.createAircraft(enrolledUser, aircraft).then(function () {
            console.log(" Aircraft creation succeed");
            res.status("200").send(aircraft);
        });
	});
    
});
router.get("/aircrafts", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getAllAircraftsDetails(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/aircrafts/historic/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.getAcDetails(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/aircrafts/listing/parts/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.AcPartsListing(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/aircrafts/listing/assemblies/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.AcAssembliesListing(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.put("/aircrafts/remove/parts/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idpart = req.body.idpart;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.RemovePartFromAc(enrolledUser, id, idpart, vDate).then(function () {
            console.log("Part removed with success");
            res.status("200").send(true);
        });
	});
});
router.put("/aircrafts/transfer/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var owner = req.body.owner;
		var id = req.params.id;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());

		logcardManager.AcOwnershipTransfer(enrolledUser, id, owner, vDate).then(function () {
		console.log("Ownership Transfer succeed");
		res.status("200").send(true);
		});
	});
});
router.put("/aircrafts/add/part/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idpart = req.body.idpart;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.addPartToAc(enrolledUser, id, idpart, vDate).then(function () {
            console.log("Part added with success");
            res.status("200").send(true);
        });
	});
    
});
router.put("/aircrafts/replace/part/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idpart = req.body.idpart;
		var idpart1 = req.body.idpart1;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.ReplacePartOnAircraft(enrolledUser, id, idpart, idpart1, vDate ).then(function () {
            console.log("Part removed with success");
            res.status("200").send(true);
        });
	});
});
router.put("/aircrafts/add/assembly/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idassembly = req.body.idassembly;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.AddAssemblyToAc(enrolledUser, id, idassembly, vDate).then(function () {
            console.log("Part added with success");
            res.status("200").send(true);
        });
	});
    
});
router.put("/aircrafts/remove/assembly/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idassembly = req.body.idassembly;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());

		logcardManager.RemoveAssemblyFromAc(enrolledUser, id, idassembly, vDate).then(function () {
            console.log("Part added with success");
            res.status("200").send(true);
        });
	});
    
});
router.put("/aircrafts/replace/assembly/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idassembly = req.body.idassembly;
		var idassembly1 = req.body.idassembly1;		
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());

		logcardManager.replaceAssemblyOnAC(enrolledUser, id, idassembly, idassembly1, vDate).then(function () {
            console.log("Part added with success");
            res.status("200").send(true);
        });
	});
    
});


// Assemblies
router.post("/assemblies", function (req, res, next) {
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
    var assembly = {
        "an": req.body.an,
        "sn": req.body.sn,
        "id": uuidV1(),
		"assemblyName": req.body.assemblyName,
        "owner": req.user.username,
        "vDate": vDate,
    };
	enrollUser(req,function(enrolledUser){
		logcardManager.createAssembly(enrolledUser, assembly).then(function () {
            console.log("creation succeed");
            res.status("200").send(assembly);
        });
	});
    
});
router.get("/assemblies", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getAllAssembliesDetails(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/assemblies/historic/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.getAssembDetails(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/assemblies/partslisting/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.AssembPartsListing(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.put("/assemblies/remove/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idpart = req.body.idpart;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.RemovePartFromAs(enrolledUser, id, idpart, vDate).then(function () {
            console.log("Part removed with success");
            res.status("200").send(true);
        });
	});
});
router.put("/assemblies/transfer/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var owner = req.body.owner;
		var id = req.params.id;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.AssembOwnershipTransfer(enrolledUser, id, owner, vDate ).then(function () {
		console.log("Ownership Transfer succeed");
		res.status("200").send(true);
		});
	});
});
router.put("/assemblies/add/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idpart = req.body.idpart;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());

		logcardManager.addPartToAssemb(enrolledUser, id, idpart, vDate).then(function () {
            console.log("Part added with success");
            res.status("200").send(true);
        });
	});
    
});
router.put("/assemblies/replace/:id", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
		var idpart = req.body.idpart;
		var idpart1 = req.body.idpart1;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		logcardManager.ReplacePartOnAssembly(enrolledUser, id, idpart, idpart1, vDate ).then(function () {
            console.log("Part removed with success");
            res.status("200").send(true);
        });
	});
});


// Fonctions
function transfertResponsable(enrolledUser,id, responsible,res) {
    //Recuperation de l utilisateur enrolle
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
	console.log("hehehehehe");
	logcardManager.responsibilityTransfer(enrolledUser, id, responsible, vDate).then(function () {
            console.log("Responsible Transfer succeed");
            res.status("200").send(true);
    });
}
function performActs(enrolledUser,id, modType, description,res) {
    //Recuperation de l utilisateur enrolle
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
    logcardManager.performActivities(enrolledUser, id, modType, description, vDate).then(function () {
        console.log("Act performed with success");
        res.status("200").send(true);
    });
}
function enrollUser(req,callback){
	let username=req.user.username;
	hfcUtil.enrollUser(username).then(function (enrolledUser) {
		callback(enrolledUser);
	});
}
function transfertOwner(enrolledUser,id, owner,res) {
    
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
	logcardManager.ownershipTransfer(enrolledUser, id, owner, vDate).then(function () {
		console.log("Ownership Transfer succeed");
		res.status("200").send(true);
	});
}


// Test Recup 
router.get("/assets/:typ", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var typ = req.params.typ;
        let parts = logcardManager.getAssets(enrolledUser, typ).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});


// List 
router.get("/List/roles", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getRolesList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/List/parts", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getPartsList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/List/assemblies", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getAssembliesList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/List/aircrafts", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getAircraftsList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/List/modifications", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getActionsList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/List/aircrafts_types", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getAircraftTypesList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});
router.get("/List/logs", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
        let parts = logcardManager.getLogsList(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});


module.exports = {};
module.exports.router = router;