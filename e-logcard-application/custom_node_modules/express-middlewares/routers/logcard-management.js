'use strict';
let express = require('express');
let router = express.Router();
let format = require('date-format');
let logcardManager = require("../../utils/chaincode-logcard.js")
let hfcUtil = require("../../utils/hfcUtil.js")
const uuidV1 = require('uuid/v1');
const nodeUtil = require('util');

router.post("/parts", function (req, res, next) {
	
    var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
    var part = {
        "pn": req.body.pn,
        "sn": req.body.sn,
        "id": uuidV1(),
        "partName": req.body.partName,
        "type": req.body.type,
        "owner": req.user.username,
        "responsible": req.body.responsible,
        "helicopter": req.body.helicopter,
        "assembly": req.body.assembly,
        "vDate": vDate,
    };
	
	enrollUser(req,function(enrolledUser){
		logcardManager.createPart(enrolledUser, part).then(function () {
            console.log("creation succeed");
            res.status("200").send(part);
        });
	});
    
});
router.get("/parts", function (req, res, next) {
	
	enrollUser(req,function(enrolledUser){
		let parts = logcardManager.getAllPartsDetails(enrolledUser).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});

	
});
router.get("/parts/:id/historic", function (req, res, next) {
	enrollUser(req,function(enrolledUser){
		var id = req.params.id;
        let parts = logcardManager.getPartDetails(enrolledUser, id).then(function (parts) {
            res.status(200).type('application/json').send(parts);
        });
	});
});

router.put("/parts/:id/:action", function (req, res, next) {
	
	enrollUser(req,function(enrolledUser){
		
		var action = req.params.action;
		var id = req.params.id;
		var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
		switch (action) {
			case "RespoTransfer":
				let responsible = req.body.responsible;
				transfertResponsable(enrolledUser,id, responsible,res);
			break;
			case "OwnerTransfer":
				let owner = req.body.owner;
				transfertOwner(enrolledUser,id, owner,res);
			break;
			case "PerformActs":
				let modType = req.body.modType;
				let description = req.body.description;
				performActs(enrolledUser,id, modType, description,res);
			break;
			default:
            break;
		}

	});  
});

function enrollUser(req,callback){
	let username=req.user.username;
	hfcUtil.enrollUser(username).then(function (enrolledUser) {
		callback(enrolledUser);
	});
}

function transfertOwner(enrolledUser,id, owner,res) {
    
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
	logcardManager.ownershipTransfer(enrolledUser, id, owner, vDate).then(function () {
		console.log("Ownership Transfer succeed");
		res.status("200").send(true);
	});
}


// Fonctions
function transfertResponsable(enrolledUser,id, responsible,res) {
    //Recuperation de l utilisateur enrolle
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
	console.log("hehehehehe");
	logcardManager.responsibilityTransfer(enrolledUser, id, responsible, vDate).then(function () {
            console.log("Responsible Transfer succeed");
            res.status("200").send(true);
    });
}

function performActs(enrolledUser,id, modType, description,res) {
    //Recuperation de l utilisateur enrolle
	var vDate = format.asString("yyyy/MM/dd hh:mm:ss", new Date());
    logcardManager.performActivities(enrolledUser, id, modType, description, vDate).then(function () {
        console.log("Responsible Transfer succeed");
        res.status("200").send(true);
    });
}



module.exports = {};
module.exports.router = router;