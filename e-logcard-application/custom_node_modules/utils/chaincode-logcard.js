'use strict';


const Util = require('./hfcUtil.js');
const nodeUtil = require('util');

	exports.createPart=function(user,part) {
		// generer un UIId
		return Util.invokeChaincode(user, 'createPart', [part.pn, part.sn, part.id, part.partName, part.type, part.owner, part.responsible, part.helicopter, part.assembly, part.vDate ]);
	};
	exports.getAllPartsDetails = function (user, typ) {
	    return Util.queryChaincode(user, 'getAllPartsDetails', [typ]);
	};
	exports.getPartDetails = function (user, typ, id) {
	    return Util.queryChaincode(user, 'getPartDetails', [typ, id]);
	};
	exports.ownershipTransfer=function(user, id, owner, vDate) {
		return Util.invokeChaincode(user, 'ownershipTransfer', [ id, owner, vDate ]);
	};
	exports.responsibilityTransfer=function(user, id, responsible, vDate) {
		return Util.invokeChaincode(user, 'responsibilityTransfer', [ id, responsible, vDate ]);
	};
	exports.performActivities=function(user, id, modType, description, vDate) {
		return Util.invokeChaincode(user, 'performActivities', [ id, modType, description, vDate ]);
	};

/*class LogcardMgt {

    constructor(usersToSecurityContext) {
        console.log('INFO: LogcardMgt -> usersToSecurityContext: ' + nodeUtil.inspect(usersToSecurityContext)); 
        this.usersToSecurityContext = usersToSecurityContext;
    }

	
    queryGetPartDetails(userId, Id) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getPartDetails', [ Id ]);
    }
	
	queryGetAllParts(userId) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllParts', [ ]);
    }
	
	queryGetAllPartsDetails(userId) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsDetails', [ ]);
    }

	queryGetAllAssemblies(userId) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllAssemblies', [ ]);
    }

	queryGetAllPartsOfThisAssembly(userId, Assembly) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisAssembly', [ Assembly ]);
    }
	
	queryGetAllPartsOfThisAssemblyInDetails(userId, Assembly) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisAssemblyInDetails', [ Assembly ]);
    }

	queryGetAllHelico(userId) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllHelico', [ ]);
    }

	queryGetAllPartsOfThisHelico(userId, Helicopter) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisHelico', [ Helicopter ]);
    }
	
	queryGetAllPartsOfThisHelicoInDetails(userId, Helicopter) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisHelicoInDetails', [ Helicopter ]);
    }
	
	queryGetAllOwners(userId) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllOwners', [ ]);
    }
	
	queryGetAllPartsOfThisOwner(userId, Owner) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisOwner', [ Owner ]);
    }
	
	queryGetAllPartsOfThisOwnerInDetails(userId, Owner) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisOwnerInDetails', [ Owner ]);
    }
	
	queryGetAllResponsibles(userId) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllResponsibles', [ ]);
    }
	
	queryGetAllPartsOfThisResponsible(userId, Responsible) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisResponsible', [ Responsible ]);
    }
	
	queryGetAllPartsOfThisResponsibleInDetails(userId, Responsible) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.queryChaincode(securityContext, 'getAllPartsOfThisResponsibleInDetails', [ Responsible ]);
    }
	
	queryUserName(userId){
		let securityContext = this.usersToSecurityContext[userId];
		console.log("user "+userId);
		return Util.queryChaincode(securityContext,'user_name',["titi"]);
	}
	
	queryHello(userId){
		let securityContext = this.usersToSecurityContext[userId];
		console.log("user "+userId);
		return Util.queryChaincode(securityContext,'hello',[]);
	}
	
	
	
	
	invokeCreatePart(userId, PN, SN, Id, PartName, Type, Owner, Responsible, Helicopter, Assembly, VDate) {
      // generer un UIId
	   let securityContext = this.usersToSecurityContext[userId];
        return Util.invokeChaincode(securityContext, 'createPart', [ PN, SN, Id, PartName, Type, Owner, Responsible, Helicopter, Assembly, VDate ]);
		
    }
	
    invokePerformActivities(userId, Id, ModType, Description, VDate) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.invokeChaincode(securityContext, 'performActivities', [Id, ModType, Description, VDate ]);
    }
	
	invokeOwnershipTransfer(userId, Id, Owner, VDate) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.invokeChaincode(securityContext, 'ownershipTransfer', [ Id, Owner, VDate ]);
    }

    invokeResponsibleTransfer(userId,  Id, Responsible, VDate) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.invokeChaincode(securityContext, 'responsibilityTransfer', [ Id, Responsible, VDate ]);
    }
	
	invokeAssemblyTrasnfer(userId, Id, Assembly, VDate) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.invokeChaincode(securityContext, 'assemblyTransfer', [ Id, Assembly, VDate ]);
    }

    invokeHelicoTrasnfer(userId, Id, Helicopter, VDate) {
        let securityContext = this.usersToSecurityContext[userId];
        return Util.invokeChaincode(securityContext, 'helicoTransfer', [ Id, Helicopter, VDate ]);
    }
}

module.exports = LogcardMgt;*/
